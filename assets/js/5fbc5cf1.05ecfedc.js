"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[207],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7480:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={title:"API",sidebar_position:4},o="API",s={unversionedId:"api",id:"api",title:"API",description:"Measurements",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/reassure/docs/api",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"API",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Methodology",permalink:"/reassure/docs/methodology"},next:{title:"Troubleshooting",permalink:"/reassure/docs/troubleshooting"}},l={},u=[{value:"Measurements",id:"measurements",level:2},{value:"<code>measureRenders()</code> function",id:"measure-renders",level:3},{value:"Example",id:"measure-renders-example",level:4},{value:"<code>MeasureRendersOptions</code> type",id:"measure-renders-options",level:3},{value:"<code>measureFunction</code> function",id:"measure-function",level:3},{value:"Example",id:"measure-function-example",level:4},{value:"<code>MeasureFunctionOptions</code> type",id:"measure-function-options",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default configuration",id:"default-configuration",level:3},{value:"<code>configure</code> function",id:"configure-function",level:3},{value:"Example",id:"configure-example",level:4},{value:"<code>resetToDefaults</code> function",id:"reset-to-defaults",level:3},{value:"Environmental variables",id:"environmental-variables",level:3}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api"},"API"),(0,a.kt)("h2",{id:"measurements"},"Measurements"),(0,a.kt)("h3",{id:"measure-renders"},(0,a.kt)("inlineCode",{parentName:"h3"},"measureRenders()")," function"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Prior to version 1.0, this function has been named ",(0,a.kt)("inlineCode",{parentName:"p"},"measurePerformance"),".")),(0,a.kt)("p",null,"Custom wrapper for the RNTL/RTL's ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," function responsible for rendering the passed screen inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"React.Profiler")," component,\nmeasuring its performance and writing results to the output file. You can use optional ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," object allows customizing aspects\nof the testing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async function measureRenders(\n  ui: React.ReactElement,\n  options?: MeasureRendersOptions,\n): Promise<MeasureResults> {\n")),(0,a.kt)("h4",{id:"measure-renders-example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// sample.perf-test.tsx\nimport { measureRenders } from 'reassure';\nimport { screen, fireEvent } from '@testing-library/react-native';\nimport { ComponentUnderTest } from './ComponentUnderTest';\n\ntest('Test with scenario', async () => {\n  const scenario = async () => {\n    fireEvent.press(screen.getByText('Go'));\n    await screen.findByText('Done');\n  };\n\n  await measureRenders(<ComponentUnderTest />, { scenario });\n});\n")),(0,a.kt)("h3",{id:"measure-renders-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"MeasureRendersOptions")," type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface MeasureRendersOptions {\n  runs?: number;\n  warmupRuns?: number;\n  wrapper?: React.ComponentType<{ children: ReactElement }>;\n  scenario?: (view?: RenderResult) => Promise<any>;\n  writeFile?: boolean;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"runs")),": number of runs per series for the particular test"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"warmupRuns")),": number of additional warmup runs that will be done and discarded before the actual runs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"wrapper")),": React component, such as a ",(0,a.kt)("inlineCode",{parentName:"li"},"Provider"),", which the ",(0,a.kt)("inlineCode",{parentName:"li"},"ui")," will be wrapped with. Note: the render duration of the ",(0,a.kt)("inlineCode",{parentName:"li"},"wrapper")," itself is excluded from the results, only the wrapped component is measured."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"scenario")),": a custom async function, which defines user interaction within the ui by utilized RNTL functions"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"writeFile")),": (default ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),") should write output to file.")),(0,a.kt)("h3",{id:"measure-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"measureFunction")," function"),(0,a.kt)("p",null,"Allows you to wrap any synchronous function, measure its performance and write results to the output file. You can use optional ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," to customize aspects of the testing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async function measureFunction(\n  fn: () => void,\n  options?: MeasureFunctionOptions,\n): Promise<MeasureResults> {\n")),(0,a.kt)("h4",{id:"measure-function-example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// sample.perf-test.tsx\nimport { measureFunction } from 'reassure';\nimport { fib } from './fib';\n\ntest('fib 30', async () => {\n  await measureFunction(() => fib(30));\n});\n")),(0,a.kt)("h3",{id:"measure-function-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"MeasureFunctionOptions")," type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface MeasureFunctionOptions {\n  runs?: number;\n  warmupRuns?: number;\n  writeFile?: boolean;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"runs")),": number of runs per series for the particular test"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"warmupRuns")),": number of additional warmup runs that will be done and discarded before the actual runs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"writeFile")),": (default ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),") should write output to file.")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("h3",{id:"default-configuration"},"Default configuration"),(0,a.kt)("p",null,"The default config which will be used by the measuring script. This configuration object can be overridden with the use\nof the ",(0,a.kt)("inlineCode",{parentName:"p"},"configure")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Config = {\n  runs?: number;\n  warmupRuns?: number;\n  outputFile?: string;\n  verbose?: boolean;\n  testingLibrary?:\n    | 'react-native'\n    | 'react'\n    | { render: (component: React.ReactElement<any>) => any; cleanup: () => any };\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const defaultConfig: Config = {\n  runs: 10,\n  warmupRuns: 1,\n  outputFile: '.reassure/current.perf',\n  verbose: false,\n  testingLibrary: undefined, // Will try auto-detect first RNTL, then RTL\n};\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"runs")),": number of repeated runs in a series per test (allows for higher accuracy by aggregating more data). Should be handled with care."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"warmupRuns")),": number of additional warmup runs that will be done and discarded before the actual runs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"outputFile")),": name of the file the records will be saved to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"verbose")),": make Reassure log more, e.g. for debugging purposes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"testingLibrary")),": where to look for ",(0,a.kt)("inlineCode",{parentName:"li"},"render")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"cleanup")," functions, supported values ",(0,a.kt)("inlineCode",{parentName:"li"},"'react-native'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'react'")," or object providing custom ",(0,a.kt)("inlineCode",{parentName:"li"},"render")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"cleanup")," functions")),(0,a.kt)("h3",{id:"configure-function"},(0,a.kt)("inlineCode",{parentName:"h3"},"configure")," function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function configure(customConfig: Partial<Config>): void;\n")),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"configure")," function to override the default config parameters."),(0,a.kt)("h4",{id:"configure-example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { configure } from 'reassure';\n\nconfigure({\n  testingLibrary: 'react', // force using React Testing Library internally by Reassure to render and cleanup\n  runs: 7, // by default repeat performance tests 7 times\n});\n")),(0,a.kt)("h3",{id:"reset-to-defaults"},(0,a.kt)("inlineCode",{parentName:"h3"},"resetToDefaults")," function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"resetToDefaults(): void\n")),(0,a.kt)("p",null,"Reset current config to the original ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultConfig")," object. You can call ",(0,a.kt)("inlineCode",{parentName:"p"},"resetToDefaults()")," anywhere in your performance test file."),(0,a.kt)("h3",{id:"environmental-variables"},"Environmental variables"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"reassure")," CLI can be parametrized using available environmental variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TEST_RUNNER_PATH"),": an alternative path for your test runner. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"'node_modules/.bin/jest'")," or on Windows ",(0,a.kt)("inlineCode",{parentName:"li"},"'node_modules/jest/bin/jest'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TEST_RUNNER_ARGS"),": a set of arguments fed to the runner. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"'--runInBand --testMatch \"<rootDir>/**/*.perf-test.[jt]s?(x)\"'"))),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"TEST_RUNNER_PATH=myOwnPath/jest/bin yarn reassure\n")))}c.isMDXComponent=!0}}]);