"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[217],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},s="Installation and setup",o={unversionedId:"installation",id:"installation",title:"Installation and setup",description:"In order to install Reassure run following command in your app folder:",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/reassure/docs/installation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/installation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Why Reassure?",permalink:"/reassure/docs/introduction"},next:{title:"Methodology",permalink:"/reassure/docs/methodology"}},l={},u=[{value:"Writing your first test",id:"writing-your-first-test",level:2},{value:"Writing async tests",id:"writing-async-tests",level:3},{value:"Measuring test performance",id:"measuring-test-performance",level:2},{value:"Write performance testing script",id:"write-performance-testing-script",level:2},{value:"CI integration",id:"ci-integration",level:2},{value:"Optional: ESLint setup",id:"optional-eslint-setup",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"installation-and-setup"},"Installation and setup"),(0,a.kt)("p",null,"In order to install Reassure run following command in your app folder:"),(0,a.kt)("p",null,"Using yarn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev reassure\n")),(0,a.kt)("p",null,"Using npm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save-dev reassure\n")),(0,a.kt)("p",null,"You will also need a working ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/getting-started"},"Jest")," setup as well as one of either ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/callstack/react-native-testing-library#installation"},"React Native Testing Library")," or ",(0,a.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note"),": React Native Testing Library is fully supported, while React Testing Library in beta stage.")),(0,a.kt)("p",null,"You can check our example projects:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/callstack/reassure/tree/main/examples/native"},"React Native (CLI)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/callstack/reassure/tree/main/examples/native-expo"},"React Native (Expo)"))),(0,a.kt)("p",null,"Reassure will try to detect which Testing Library you have installed. In case both React Native Testing Library and React Testing Library are present it will\nwarn you about that and give a precedence to React Native Testing Library. You can explicitly specify Testing Library to by used by using ",(0,a.kt)("a",{parentName:"p",href:"#configure-function"},(0,a.kt)("inlineCode",{parentName:"a"},"configure"))," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"configure({ testingLibrary: 'react-native' })\n// or\nconfigure({ testingLibrary: 'react' })\n")),(0,a.kt)("p",null,"You should set it in your Jest setup file and you can override it in particular test files if needed."),(0,a.kt)("h2",{id:"writing-your-first-test"},"Writing your first test"),(0,a.kt)("p",null,"Now that the library is installed, you can write you first test scenario in a file with ",(0,a.kt)("inlineCode",{parentName:"p"},".perf-test.js"),"/",(0,a.kt)("inlineCode",{parentName:"p"},".perf-test.tsx")," extension:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// ComponentUnderTest.perf-test.tsx\nimport { measurePerformance } from 'reassure';\n\ntest('Simple test', async () => {\n  await measurePerformance(<ComponentUnderTest />);\n});\n")),(0,a.kt)("p",null,"This test will measure render times of ",(0,a.kt)("inlineCode",{parentName:"p"},"ComponentUnderTest")," during mounting and resulting sync effects."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note"),": Reassure will automatically match test filenames using Jest's ",(0,a.kt)("inlineCode",{parentName:"p"},"--testMatch")," option with value ",(0,a.kt)("inlineCode",{parentName:"p"},'"<rootDir>/**/*.perf-test.[jt]s?(x)"'),".")),(0,a.kt)("h3",{id:"writing-async-tests"},"Writing async tests"),(0,a.kt)("p",null,"If your component contains any async logic or you want to test some interaction you should pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"scenario")," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { measurePerformance } from 'reassure';\nimport { screen, fireEvent } from '@testing-library/react-native';\n\ntest('Test with scenario', async () => {\n  const scenario = async () => {\n    fireEvent.press(screen.getByText('Go'));\n    await screen.findByText('Done');\n  };\n\n  await measurePerformance(<ComponentUnderTest />, { scenario });\n});\n")),(0,a.kt)("p",null,"The body of the ",(0,a.kt)("inlineCode",{parentName:"p"},"scenario")," function is using familiar React Native Testing Library methods."),(0,a.kt)("p",null,"In case of using a version of React Native Testing Library lower than v10.1.0, where ",(0,a.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-testing-library/docs/api/#screen"},(0,a.kt)("inlineCode",{parentName:"a"},"screen")," helper")," is not available, the ",(0,a.kt)("inlineCode",{parentName:"p"},"scenario")," function provides it as its first argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { measurePerformance } from 'reassure';\nimport { fireEvent } from '@testing-library/react-native';\n\ntest('Test with scenario', async () => {\n  const scenario = async (screen) => {\n    fireEvent.press(screen.getByText('Go'));\n    await screen.findByText('Done');\n  };\n\n  await measurePerformance(<ComponentUnderTest />, { scenario });\n});\n")),(0,a.kt)("p",null,"If your test contains any async changes, you will need to make sure that the scenario waits for these changes to settle, e.g. using\n",(0,a.kt)("inlineCode",{parentName:"p"},"findBy")," queries, ",(0,a.kt)("inlineCode",{parentName:"p"},"waitFor")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"waitForElementToBeRemoved")," functions from RNTL."),(0,a.kt)("p",null,"For more examples look into our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/callstack/reassure/tree/main/examples/native/src"},"test example app"),"."),(0,a.kt)("h2",{id:"measuring-test-performance"},"Measuring test performance"),(0,a.kt)("p",null,"In order to measure your first test performance you need to run following command in terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn reassure\n")),(0,a.kt)("p",null,"This command will run your tests multiple times using Jest, gathering render statistics, and will write them to\n",(0,a.kt)("inlineCode",{parentName:"p"},".reassure/current.perf")," file. In order to check your setup, check if the output file exists after running the\ncommand for the first time."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," You can add ",(0,a.kt)("inlineCode",{parentName:"p"},".reassure/")," folder to your ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," file to avoid accidentally committing your results.")),(0,a.kt)("p",null,"Reassure CLI will automatically try to detect your source code branch name and commit hash when you are using Git. You can override these options, e.g. if you are using different version control system:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn reassure --branch [branch name] --commit-hash [commit hash] \n")),(0,a.kt)("h2",{id:"write-performance-testing-script"},"Write performance testing script"),(0,a.kt)("p",null,"In order to detect performance changes, you need to measure the performance of two versions of your code\ncurrent (your modified code), and baseline (your reference point, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," branch). In order to measure performance\non two different branches you need to either switch branches in git or clone two copies of your repository."),(0,a.kt)("p",null,"We want to automate this task, so it can run on the CI. In order to do that you will need to create a\nperformance testing script. You should save it in your repository, e.g. as ",(0,a.kt)("inlineCode",{parentName:"p"},"reassure-tests.sh"),"."),(0,a.kt)("p",null,"A simple version of such script, using branch changing approach is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'#!/usr/bin/env bash\nset -e\n\nBASELINE_BRANCH=${BASELINE_BRANCH:="main"}\n\n# Required for `git switch` on CI\ngit fetch origin\n\n# Gather baseline perf measurements\ngit switch "$BASELINE_BRANCH"\nyarn install --force\nyarn reassure --baseline\n\n# Gather current perf measurements & compare results\ngit switch --detach -\nyarn install --force\nyarn reassure\n')),(0,a.kt)("h2",{id:"ci-integration"},"CI integration"),(0,a.kt)("p",null,"As a final setup step you need to configure your CI to run the performance testing script and output the result.\nFor presenting output at the moment we integrate with Danger JS, which supports all major CI tools."),(0,a.kt)("p",null,"You will need a working ",(0,a.kt)("a",{parentName:"p",href:"https://danger.systems/js/guides/getting_started.html"},"Danger JS setup"),"."),(0,a.kt)("p",null,"Then add Reassure Danger JS plugin to your dangerfile :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import path from 'path';\nimport { dangerReassure } from 'reassure';\n\ndangerReassure({\n  inputFilePath: path.join(__dirname, '.reassure/output.md'),\n});\n")),(0,a.kt)("p",null,"You can also check our example ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/callstack/reassure/blob/main/dangerfile.ts"},"Dangerfile"),"."),(0,a.kt)("p",null,"Finally run both performance testing script & danger in your CI config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Run performance testing script\n  run: ./reassure-tests.sh\n\n- name: Run Danger.js\n  run: yarn danger ci\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n")),(0,a.kt)("p",null,"You can also check our example ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/callstack/reassure/blob/main/.github/workflows/main.yml"},"GitHub workflow"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note"),": Your performance test will run much longer than regular integration tests. It's because we run each test scenario multiple times (by default 10), and we repeat that for two branches of your code. Hence, each test will run 20 times by default. That's unless you increase that number even higher.")),(0,a.kt)("h2",{id:"optional-eslint-setup"},"Optional: ESLint setup"),(0,a.kt)("p",null,"ESLint might require you to have at least one ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")," statement in each of your tests. In order to avoid this requirement\nfor performance tests you can add following override to your ",(0,a.kt)("inlineCode",{parentName:"p"},".eslintrc")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"rules: {\n 'jest/expect-expect': [\n 'error',\n    { assertFunctionNames: ['expect', 'measurePerformance'] },\n  ],\n}\n")))}p.isMDXComponent=!0}}]);